{
	"info": {
		"_postman_id": "29d84ce1-17f3-46a2-873c-f0df4171db76",
		"name": "General collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23031302"
	},
	"item": [
		{
			"name": "TagJobs",
			"item": [
				{
					"name": "Authorization Moderator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "test8708716@digimatics.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody)\r",
									"var id_newtag = data.id;\r",
									"pm.environment.set(\"id_newtag\", id_newtag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\",\"title\", \"description\",\"tonality\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"title\":\"Деньги\",\"description\":\"Манимани\",\"tonality\":\"Negative\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/moderator/tagging/review/tag/save",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"tagging",
								"review",
								"tag",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody); \r",
									"pm.environment.set (\"idRule\", data.id);\r",
									"var id_newtag = pm.environment.get(\"id_newtag\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\",\"tagId\",\"textRule\",\"semRule\",\"equation\",\"dateStart\",\"dateEnd\",\"rateStart\",\"rateEnd\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"tagId\":{{id_newtag}},\"textRule\":\"доллар\",\"rateStart\":1,\"rateEnd\":5,\"equation\":{\"kind\":\"Regex\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/moderator/tagging/review/rule/save",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"tagging",
								"review",
								"rule",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"removeRefererHeaderOnRedirect": false,
						"followAuthorizationHeader": true,
						"disableCookies": true,
						"disableUrlEncoding": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Review tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody); \r",
									"var id_newtag = pm.environment.get(\"id_newtag\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\",\"title\",\"description\",\"tonality\");\r",
									"});\r",
									"\r",
									"pm.test(\"compare tagId\", function () {\r",
									"     pm.expect(data[0].id == id_newtag).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"reviewText\":\"доллары\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/reviews/suggest_tags",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews",
								"suggest_tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Leave a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody); \r",
									"pm.environment.set (\"reviewIdTag\",data.review_id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include( 'review_id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json_blob",
									"type": "file",
									"src": "json_blob.json"
								}
							]
						},
						"url": {
							"raw": "{{host}}/reviews.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Moderator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "test8708716@digimatics.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody); \r",
									"var id_newtag = pm.environment.get(\"id_newtag\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\",\"tagId\",\"textRule\",\"semRule\",\"equation\",\"dateStart\",\"dateEnd\",\"rateStart\",\"rateEnd\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":{{idRule}},\"tagId\":{{id_newtag}},\"textRule\":\"кошка\",\"rateStart\":1,\"rateEnd\":5,\"equation\":{\"kind\":\"Regex\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/moderator/tagging/review/rule/save",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"tagging",
								"review",
								"rule",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "Repeated tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\",\"jobType\",\"status\",\"createdAt\",\"startedAt\",\"finishedAt\",\"added\",\"deleted\", \"error\",\"dateStart\",\"dateEnd\",\"tagIds\");\r",
									"});\r",
									"\r",
									"pm.test(\"error\", function () {\r",
									"    pm.expect(data[0].error).to.eql (null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"tagIds\":[{{id_newtag}}],\"filters\":{\"dateStart\":\"2022-09-05\",\"dateEnd\":\"2025-08-13\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/moderator/tagging/review/recalculateTags",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"tagging",
								"review",
								"recalculateTags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check tag job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody); \r",
									"var id_newtag = pm.environment.get(\"id_newtag\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"tag job\", function () {\r",
									"    pm.expect(data[\"tags\"][0].id).to.eql (id_newtag);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/moderator/tagging/review/{{reviewIdTag}}/tags",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"tagging",
								"review",
								"{{reviewIdTag}}",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/moderator/tagging/review/tag/{{id_newtag}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"tagging",
								"review",
								"tag",
								"{{id_newtag}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Integration with BI",
			"item": [
				{
					"name": "administrator authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Api.  Dataset reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\",\"slug\");\r",
									"});\r",
									"\r",
									"pm.test(\"The resulting JSON contains all the values\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Оценки\",\"rates\",\"Отзывы\",\"event_reviews\",\"Услуги\",\"services\",\"События\",\"events\",\"Категории услуг\",\"classifiers\",\"Справочник ведомств\",\"authorities\",\"Справочник критериев оценки\",\"indicators\",\"Справочник значений показателей\",\"indicator_values\",\"Справочник стадий оказания услуги\",\"event_stages\",\"Зарегистрированные внешние системы\",\"vendors\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aW",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/bi/dictionaries",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"bi",
								"dictionaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "API. Validate event dataset, period one day and limit 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify tatus code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('events','next');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aW",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/bi/request_data?from_date=2021-02-28&to_date=2021-02-28&limit=5&data_set=events",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"bi",
								"request_data"
							],
							"query": [
								{
									"key": "from_date",
									"value": "2021-02-28"
								},
								{
									"key": "to_date",
									"value": "2021-02-28"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "data_set",
									"value": "events"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "API. Validation of one month, rates, limit 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"pm.environment.set(\"next\",data.next);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('rates','next');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aW",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/bi/request_data?from_date=2020-01-28&to_date=2020-02-28&data_set=rates&limit=50&Authorization=token",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"bi",
								"request_data"
							],
							"query": [
								{
									"key": "from_date",
									"value": "2020-01-28"
								},
								{
									"key": "to_date",
									"value": "2020-02-28"
								},
								{
									"key": "data_set",
									"value": "rates"
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "Authorization",
									"value": "token"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "API. Checking the next set of data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"pm.environment.set(\"next\",data.next);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('rates','next');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aW",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}{{next}}",
							"host": [
								"{{host}}{{next}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Negative-  Verification without a token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/bi/request_data?from_date=2022-01-01&to_date=2022-02-01&data_set=services&limit=10",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"bi",
								"request_data"
							],
							"query": [
								{
									"key": "from_date",
									"value": "2022-01-01"
								},
								{
									"key": "to_date",
									"value": "2022-02-01"
								},
								{
									"key": "data_set",
									"value": "services"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "WEB. Dataset reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify tatus code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('name','slug');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/admin/bi_journals/dictionaries",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"admin",
								"bi_journals",
								"dictionaries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Web. One Year Validation, rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify tatus code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('biJournals','totalPages');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/admin/bi_journals?requested_data=rates&from_date=2021-03-05&to_date=2022-03-05",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"admin",
								"bi_journals"
							],
							"query": [
								{
									"key": "requested_data",
									"value": "rates"
								},
								{
									"key": "from_date",
									"value": "2021-03-05"
								},
								{
									"key": "to_date",
									"value": "2022-03-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Web. Validation rates and indicators, one month period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify tatus code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('biJournals','totalPages');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/cabinet/admin/bi_journals?from_date=2020-01-17&to_date=2020-02-17&requested_data=rates",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"admin",
								"bi_journals"
							],
							"query": [
								{
									"key": "from_date",
									"value": "2020-01-17"
								},
								{
									"key": "to_date",
									"value": "2020-02-17"
								},
								{
									"key": "requested_data",
									"value": "rates"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"requestType\", data [\"biJournals\"][8].requestType);\r",
									"pm.environment.set(\"status\", data [\"biJournals\"][8].status );\r",
									"\r",
									"var requestType = pm.environment.get(\"requestType\");\r",
									"var status = pm.environment.get(\"status\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that request_type equals site\", function () {\r",
									"    pm.expect(requestType).to.include ('site');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status equals\", function () {\r",
									"    pm.expect(status).to.include ('complete');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/cabinet/admin/bi_journals?from_date=2022-01-01T00:00:00.000Z&to_date=2022-07-26T00:00:00.000Z&requested_data=rates&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"admin",
								"bi_journals"
							],
							"query": [
								{
									"key": "from_date",
									"value": "2022-01-01T00:00:00.000Z"
								},
								{
									"key": "to_date",
									"value": "2022-07-26T00:00:00.000Z"
								},
								{
									"key": "requested_data",
									"value": "rates"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Web. Method for creating a new upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"requestType\", data .requestType);\r",
									"pm.environment.set(\"status\", data .status );\r",
									"\r",
									"var requestType = pm.environment.get(\"requestType\");\r",
									"var status = pm.environment.get(\"status\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('id','requestedDataSet','fromDate','toDate','requestType','status','createdAt','errorText','downloadCounter','dataCount','fileDeletedTime');\r",
									"});\r",
									" \r",
									"pm.test(\"Verify that request_type equals site\", function () {\r",
									"    pm.expect(requestType).to.include ('site');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that status equals\", function () {\r",
									"    pm.expect(status).to.include ('new');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\"bi_journal\": \r\n             {\"from_date\": [\"2022-02-28\"],\r\n                \"to_date\": [\"2022-03-04\"], \r\n     \"requested_data_set\": [\"events\", \"rates\"]\r\n     }\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/admin/bi_journals",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"admin",
								"bi_journals"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Summary report MFC",
			"item": [
				{
					"name": "Authorization Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "operator_test@test.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Summary reports MFC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"rates_count\", data[\"data\"] [\"total\"].rates_count);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    \r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"total\",\"rows\");\r",
									"});\r",
									"    \r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Tue Sep 06 2022\",\"category_ids\":[1,2,3,4,5,6,7,8,9,13,12,15],\"federal_district_ids\":[],\"region_codes\":[\"45\"],\"mfc_id\":1797,\"service_type\":\"pprf\",\"service_ids\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/operator/summary_mfcs",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"operator",
								"summary_mfcs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"removeRefererHeaderOnRedirect": false,
						"followAuthorizationHeader": true,
						"disableCookies": true,
						"disableUrlEncoding": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cabinet matches the use\", function () {\r",
									"  pm.expect(data[\"cabinet\"].name).to.eql(\"Кабинет администратора\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Leave a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include( 'review_id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Disposition",
								"value": "form-data",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json_blob",
									"type": "file",
									"src": "/C:/Users/ck105/OneDrive/Рабочий стол/json_blob1.json"
								}
							]
						},
						"url": {
							"raw": "{{host}}/reviews.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "operator_test@test.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Cabinet matches the use\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[\"cabinet\"].name).to.eql(\"Кабинет оператора\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Summary reports MFC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"total\",\"rows\");\r",
									"    });\r",
									"\r",
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"rates_count_2\", data[\"data\"] [\"total\"].rates_count);\r",
									"\r",
									"var rates_count_2 = pm.environment.get('rates_count_2');\r",
									"var rates_count = pm.environment.get('rates_count');\r",
									"\r",
									"pm.test(\"comparisson\", function () {\r",
									"if (rates_count ==  rates_count_2 + 4)\r",
									"{ \r",
									"    console.log ('ok')\r",
									"    }\r",
									"     else {\r",
									"         console.log ('Not ok')\r",
									"     }\r",
									"\r",
									"pm.expect(rates_count_2).to.eql (rates_count + 4);\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Tue Sep 06 2022\",\"category_ids\":[1,2,3,4,5,6,7,8,9,13,12,15],\"federal_district_ids\":[],\"region_codes\":[\"45\"],\"mfc_id\":1797,\"service_type\":\"pprf\",\"service_ids\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/operator/summary_mfcs",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"operator",
								"summary_mfcs"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Summary report",
			"item": [
				{
					"name": "Authorization FOIV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "testtesttest@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cabinet matches the use\", function () {\r",
									"    pm.expect(data[\"cabinet\"].name).to.eql(\"Кабинет органа исполнительной власти\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Summary report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"count\", data [\"totals\"].count);\r",
									"pm.environment.set(\"value5\", data  [\"totals\"].value5);\r",
									"pm.environment.set(\"events_rated_count\", data [\"result\"][0][\"body\"].events_rated_count);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    \r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"result\", \"body\",\"totals\");\r",
									"});\r",
									"    \r",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Tue Aug 16 2022\",\"category_ids\":[1,2,3,4,5,6,7,8,9,13,12,15],\"federal_district_ids\":[],\"region_codes\":[],\"terrorg_ids\":[],\"service_ids\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/summary",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"removeRefererHeaderOnRedirect": false,
						"followAuthorizationHeader": true,
						"disableCookies": true,
						"disableUrlEncoding": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cabinet matches the use\", function () {\r",
									"    pm.expect(data[\"cabinet\"].name).to.eql( \"Кабинет администратора\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Leave a review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include( 'review_id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json_blob",
									"type": "file",
									"src": "/C:/Users/ck105/OneDrive/Рабочий стол/json_blob.json"
								}
							]
						},
						"url": {
							"raw": "{{host}}/reviews.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization FOIV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "testtesttest@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cabinet matches the use\", function () {\r",
									"    pm.expect(data[\"cabinet\"].name).to.eql(\"Кабинет органа исполнительной власти\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {},
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Summary report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"count_2\", data [\"totals\"].count);\r",
									"pm.environment.set(\"value5_2\", data  [\"totals\"].value5);\r",
									"pm.environment.set(\"events_rated_count_2\", data [\"result\"][0][\"body\"].events_rated_count);\r",
									"\r",
									"var value5_2 = pm.environment.get('value5_2');\r",
									"var value5 = pm.environment.get('value5');\r",
									"var count_2 = pm.environment.get('count_2');\r",
									"var count = pm.environment.get('count');\r",
									"var events_rated_count_2 = pm.environment.get('events_rated_count_2') \r",
									"var events_rated_count = pm.environment.get('events_rated_count'); \r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"   \r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include ( \"body\",\"totals\");\r",
									"});\r",
									"\r",
									"pm.test(\"compare value5\", function () {\r",
									"    if (value5_2 ==  value5_2 + 2)\r",
									"    { \r",
									"        console.log ('ok')\r",
									"    }\r",
									"    else {\r",
									"        console.log ('Not ok')\r",
									"    }\r",
									"    pm.expect(value5_2).to.eql (value5 + 2);\r",
									"});//сравнение количества оценок \"5\"\r",
									"\r",
									"pm.test(\"compare count\", function () {\r",
									"    if (count_2 == count + 2)\r",
									"    { \r",
									"        console.log ('ok')\r",
									"    }\r",
									"    else {\r",
									"        console.log ('Not ok')\r",
									"    }\r",
									"    pm.expect(count_2).to.eql (count + 2);\r",
									"});// сравнение общего количества оценок \r",
									"\r",
									"pm.test(\"compare events rated count\", function () {\r",
									"    if  (events_rated_count_2 == events_rated_count + 1) // 49 = 48 + 1\r",
									"    { \r",
									"        console.log ('ok')\r",
									"    }\r",
									"    else \r",
									"    {\r",
									"        console.log ('Not ok')\r",
									"    }\r",
									"    pm.expect(events_rated_count_2).to.eql (events_rated_count + 1);\r",
									"});//сравнение количества оцененных фактов\r",
									"\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Fri Aug 05 2022\",\"category_ids\":[1,2,3,4,5,6,7,8,9,13,12,15],\"federal_district_ids\":[],\"region_codes\":[],\"terrorg_ids\":[],\"service_ids\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/summary",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Criteria summary report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"count_2\", data [\"totals\"].count);\r",
									"pm.environment.set(\"value5_2\", data  [\"totals\"].value5);\r",
									"pm.environment.set(\"events_rated_count_2\", data [\"result\"][0][\"body\"].events_rated_count);\r",
									"\r",
									"var value5_2 = pm.environment.get('value5_2');\r",
									"var value5 = pm.environment.get('value5');\r",
									"var count_2 = pm.environment.get('count_2');\r",
									"var count = pm.environment.get('count');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"  \r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"result\", \"body\",\"totals\");\r",
									"});\r",
									"\r",
									"pm.test(\"compare value5\", function () {\r",
									"    if (value5_2 ==  value5_2 + 2)\r",
									"    { \r",
									"        console.log ('ok')\r",
									"    }\r",
									"    else {\r",
									"        console.log ('Not ok')\r",
									"     }\r",
									"    pm.expect(value5_2).to.eql (value5 + 2);\r",
									"});//сравнение количества оценок \"5\"\r",
									"\r",
									"pm.test(\"compare count\", function () {\r",
									"    if (count_2 == count + 2)\r",
									"    { \r",
									"        console.log ('ok')\r",
									"    }\r",
									"    else {\r",
									"        console.log ('Not ok')\r",
									"    }\r",
									"    pm.expect(count_2).to.eql (count + 2);\r",
									"});// сравнение общего количества оценок \r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Sat Jan 01 2022\",\"category_ids\":[1,2,3,4,5,6,7,8,9,13,12,15],\"foiv_ids\":[],\"federal_district_ids\":[],\"region_codes\":[],\"terrorg_ids\":[],\"service_ids\":[],\"indicator_ids\":null}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/summary_extended",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"summary_extended"
							]
						}
					},
					"response": []
				},
				{
					"name": "Electronic Resources Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"result\", \"body\",\"totals\");\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"month\",\"date_start\":\"Fri Jul 01 2022\",\"category_ids\":[1,2,3,4,5,6,7,8,9,13,12,15],\"federal_district_ids\":[],\"region_codes\":[],\"terrorg_ids\":[],\"service_ids\":[\"10000011206\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/summary_electronic",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"summary_electronic"
							]
						}
					},
					"response": []
				},
				{
					"name": "For work with MKGU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"federal_district_ids\":[],\"region_codes\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/statistics",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"statistics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suspicious ratings and reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"     \r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"userId\",\r",
									"        \"date\",\r",
									"        \"pos\",\r",
									"        \"regionName\",\r",
									"        \"code\",\r",
									"        \"name\",\r",
									"        \"serviceName\",\r",
									"        \"suspectMark\");\r",
									"});\r",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"quarter\",\"date_start\":\"Fri Jul 01 2022\",\"cheat_type\":\"authority\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/suspect",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"suspect"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Сhecking score with type,Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"score1\", data [0].score);\r",
									"pm.environment.set(\"score2\", data [1].score);\r",
									"pm.environment.set(\"scoreLast\", data [data.length - 1 ].score);\r",
									"\r",
									"var score1 = pm.environment.get('score1');\r",
									"var score2 = pm.environment.get('score2');\r",
									"var scoreLast = pm.environment.get('scoreLast');\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"id\",\"score\");\r",
									"});\r",
									"\r",
									"pm.test('compare score1 and score2', function() {\r",
									"  pm.expect(score1 >= score2).to.be.true;\r",
									"}); // score первого поисккового результата должен быть больше или равен второму\r",
									"\r",
									"pm.test('compare score1 and scoreLast', function() {\r",
									"  pm.expect(score1 >= scoreLast).to.be.true;\r",
									"});// score первого поисккового результата должен быть больше или равен последнему\r",
									"\r",
									"pm.test('compare score2 and scoreLast', function() {\r",
									"  pm.expect(score2 >= scoreLast).to.be.true;\r",
									"});// score второго поисккового результата должен быть больше или равен последнему"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {},
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{hostSwagger}}/search?sentence=выплата&entityType=Service&onlyActive=true&limit=30",
							"host": [
								"{{hostSwagger}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "sentence",
									"value": "выплата"
								},
								{
									"key": "entityType",
									"value": "Service"
								},
								{
									"key": "onlyActive",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Сhecking score with type ,Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"score1\", data [0].score);\r",
									"pm.environment.set(\"score2\", data [1].score);\r",
									"pm.environment.set(\"scoreLast\", data [data.length - 1 ].score);\r",
									"\r",
									"var score1 = pm.environment.get('score1');\r",
									"var score2 = pm.environment.get('score2');\r",
									"var scoreLast = pm.environment.get('scoreLast');\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"id\",\"score\");\r",
									"});\r",
									"\r",
									"pm.test('compare score1 and score2', function() {\r",
									"  pm.expect(score1 >= score2).to.be.true;\r",
									"}); // score первого поисккового результата должен быть больше или равен второму\r",
									"\r",
									"pm.test('compare score1 and scoreLast', function() {\r",
									"  pm.expect(score1 >= scoreLast).to.be.true;\r",
									"});// score первого поисккового результата должен быть больше или равен последнему\r",
									"\r",
									"pm.test('compare score2 and scoreLast', function() {\r",
									"  pm.expect(score2 >= scoreLast).to.be.true;\r",
									"});// score второго поисккового результата должен быть больше или равен последнему"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostSwagger}}/search?sentence=казначейство&entityType=Authority&onlyActive=true&limit=30",
							"host": [
								"{{hostSwagger}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "sentence",
									"value": "казначейство"
								},
								{
									"key": "entityType",
									"value": "Authority"
								},
								{
									"key": "onlyActive",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking score with type ,Vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"score1\", data [0].score);\r",
									"pm.environment.set(\"score2\", data [1].score);\r",
									"pm.environment.set(\"scoreLast\", data [data.length - 1 ].score);\r",
									"\r",
									"var score1 = pm.environment.get('score1');\r",
									"var score2 = pm.environment.get('score2');\r",
									"var scoreLast = pm.environment.get('scoreLast');\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include (\"id\",\"score\");\r",
									"});\r",
									"\r",
									"pm.test('compare score1 and score2', function() {\r",
									"  pm.expect(score1 >= score2).to.be.true;\r",
									"}); // score первого поисккового результата должен быть больше или равен второму\r",
									"\r",
									"pm.test('compare score1 and scoreLast', function() {\r",
									"  pm.expect(score1 >= scoreLast).to.be.true;\r",
									"});// score первого поисккового результата должен быть больше или равен последнему\r",
									"\r",
									"pm.test('compare score2 and scoreLast', function() {\r",
									"  pm.expect(score2 >= scoreLast).to.be.true;\r",
									"});// score второго поисккового результата должен быть больше или равен последнему"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{hostSwagger}}/search?sentence=бизнес-офис&entityType=Vendor&onlyActive=true&limit=30",
							"host": [
								"{{hostSwagger}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "sentence",
									"value": "бизнес-офис"
								},
								{
									"key": "entityType",
									"value": "Vendor"
								},
								{
									"key": "onlyActive",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search services by region",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"mainRegionCode\", data [0][\"authority\"].mainRegionCode);\r",
									"pm.environment.set(\"countElementsArr\",data.length);\r",
									"\r",
									"var mainRegionCode = pm.environment.get('mainRegionCode');\r",
									"var region = pm.environment.get('region');\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include ( \"id\",\"name\",\"shortName\",\"regId\",\"displayedName\",\"authorityRegId\",\"authority\");\r",
									"});\r",
									"\r",
									"pm.test('compare region', function() {\r",
									"  pm.expect(mainRegionCode == region).to.be.true;\r",
									"});// регион в переменной должен совпадать с регионом найденной услуги\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/fts/services?query=Регистрация&page=1&region={{region}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"services"
							],
							"query": [
								{
									"key": "query",
									"value": "Регистрация"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "region",
									"value": "{{region}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Services number of results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"countElementsArr2\", data.count);\r",
									"\r",
									"var countElementsArr = pm.environment.get('countElementsArr');\r",
									"var countElementsArr2 = pm.environment.get('countElementsArr2');\r",
									"\r",
									"pm.test('compare count', function() {\r",
									"  pm.expect(countElementsArr == countElementsArr2).to.be.true;\r",
									"});// количество поисковых результатов в предыдущем запросе, должны совпадать с количеством отданым в ответе"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/fts/services_count?query=Регистрация&page=1&region={{region}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"services_count"
							],
							"query": [
								{
									"key": "query",
									"value": "Регистрация"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "region",
									"value": "{{region}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search authorities by region on the main page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"mainRegionCode\", data [0].mainRegionCode);\r",
									"pm.environment.set(\"countElementsArr\",data.length);\r",
									"\r",
									"var mainRegionCode = pm.environment.get('mainRegionCode');\r",
									"var region = pm.environment.get('region');\r",
									"\r",
									"pm.test('compare region', function() {\r",
									"  pm.expect(mainRegionCode == region).to.be.true;\r",
									"});// регион в переменной должен совпадать с регионом найденной услуги"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/fts/authorities?query=управление внутренних дел&page=1&with_object_changes=true&region={{region}}&archive=false",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"authorities"
							],
							"query": [
								{
									"key": "query",
									"value": "управление внутренних дел"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "with_object_changes",
									"value": "true"
								},
								{
									"key": "region",
									"value": "{{region}}"
								},
								{
									"key": "archive",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorities-number of results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"countElementsArr2\", data .count);\r",
									"\r",
									"var countElementsArr = pm.environment.get('countElementsArr');\r",
									"var countElementsArr2 = pm.environment.get('countElementsArr2');\r",
									"\r",
									"pm.test('compare count', function() {\r",
									"  pm.expect(countElementsArr == countElementsArr2).to.be.true;\r",
									"});// количество поисковых результатов в предыдущем запросе, должны совпадать с количеством отданым в ответе"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/fts/authorities_count?query=управление внутренних дел&region={{region}}&archive=false",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"authorities_count"
							],
							"query": [
								{
									"key": "query",
									"value": "управление внутренних дел"
								},
								{
									"key": "region",
									"value": "{{region}}"
								},
								{
									"key": "archive",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Vendor by region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"countElementsArr\",data.length);\r",
									"\r",
									"var region = pm.environment.get('region');\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/fts/mfcs?query=Бизнес-офис&region={{region}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"mfcs"
							],
							"query": [
								{
									"key": "query",
									"value": "Бизнес-офис"
								},
								{
									"key": "region",
									"value": "{{region}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendors- number of results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"countElementsArr2\", data .count);\r",
									"\r",
									"var countElementsArr = pm.environment.get('countElementsArr');\r",
									"var countElementsArr2 = pm.environment.get('countElementsArr2');\r",
									"\r",
									"pm.test('compare count', function() {\r",
									"  pm.expect(countElementsArr == countElementsArr2).to.be.true;\r",
									"});// количество поисковых результатов в предыдущем запросе, должны совпадать с количеством отданым в ответе"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/fts/mfcs_count?query=Бизнес - офис&page=1&region={{region}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"mfcs_count"
							],
							"query": [
								{
									"key": "query",
									"value": "Бизнес - офис"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "region",
									"value": "{{region}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Checking for the correct return of data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include( 'id',\r",
									"        'name' ,\r",
									"        'ogrn',\r",
									"        'okato',\r",
									"        'oktmo',\r",
									"        'actual',\r",
									"        'rguStatus',\r",
									"        'shortName',\r",
									"        'regId',\r",
									"        'mainRegionCode',\r",
									"        'updatedAt',\r",
									"        'displayedName',\r",
									"        'archive');\r",
									"});\r",
									"\r",
									"pm.test(\"Response containse id\", function () {\r",
									"    pm.expect(data[0].name).to.eql(\"Межрайонная инспекция Федеральной налоговой службы № 7 по Ленинградской области\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://stage.vashkontrol.ru/fts/authorities?query=Межрайонная инспекция Федеральной налоговой службы № 7 по Ленинградской области&page=1",
							"protocol": "https",
							"host": [
								"stage",
								"vashkontrol",
								"ru"
							],
							"path": [
								"fts",
								"authorities"
							],
							"query": [
								{
									"key": "query",
									"value": "Межрайонная инспекция Федеральной налоговой службы № 7 по Ленинградской области"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search on the page of authorities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"pm.test(\"Response containse id\", function () {\r",
									"     pm.expect(data[\"data\"][0].name).to.eql(\"Комитет правопорядка и безопасности Ленинградской области\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/authorities/regional_departments.json?region_code=41&page=1&per_page=25&filter=комитет правопорядка и безопасности ленинградской области",
							"host": [
								"{{host}}"
							],
							"path": [
								"authorities",
								"regional_departments.json"
							],
							"query": [
								{
									"key": "region_code",
									"value": "41"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "25"
								},
								{
									"key": "filter",
									"value": "комитет правопорядка и безопасности ленинградской области"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search - On the services page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{host}}/fts/services?query=выплата&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"services"
							],
							"query": [
								{
									"key": "query",
									"value": "выплата"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search on the vendors page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mfcs.json?region_code=19&page=1&per_page=25&filter=мку",
							"host": [
								"{{host}}"
							],
							"path": [
								"mfcs.json"
							],
							"query": [
								{
									"key": "region_code",
									"value": "19"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "25"
								},
								{
									"key": "filter",
									"value": "мку"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Quick service search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/fts/services.json?query=паспорт",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"services.json"
							],
							"query": [
								{
									"key": "query",
									"value": "паспорт"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"cookie\", null)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						]
					}
				}
			]
		},
		{
			"name": "Search Front",
			"item": [
				{
					"name": "Search MFC",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/mfcs.json?region_code=01&page=1&per_page=25&filter=стародраченино",
							"host": [
								"{{host}}"
							],
							"path": [
								"mfcs.json"
							],
							"query": [
								{
									"key": "region_code",
									"value": "01"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "25"
								},
								{
									"key": "filter",
									"value": "стародраченино"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Authotity",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/authorities/head_departments.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"authorities",
								"head_departments.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search under the depertment",
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/authorities/10000002871/subs?q=по Приморскому краю&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"authorities",
								"10000002871",
								"subs"
							],
							"query": [
								{
									"key": "q",
									"value": "по Приморскому краю"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Flexible reports",
			"item": [
				{
					"name": "Authorization Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "cookie",
								"value": "_vashcontrol_session=0UihRAS78biijM3Dywzl%2BZIsERkrXwMnX9Y87cK2miud7nDjHZ7hTqg30YkS2f4hh3CnBkVk3ReGDg5m77W3RLfo%2FW%2FesV1rHaRDPiqDO7pmmhhay%2F0HjTeIthRrc0mbTzLgW5wcLiCC3sQ9qnalMq5eG6PyhOO%2FuvPmpdiZmt6EKQ8PAjfoQuiraNeL2qBW%2FkM%2BY5U4gD2LUexsz9aFXcCneH9GLe3x5V0SvzdnoscNTM7yVFrWAkkoEkhh%2Fjtfxe7gRGWP4ebEMqTd1GBU0fVTz20Yms0aWT7oRHSyNcrHsR1pGWP1%2FBO0lJ9id1H4TmZ%2FKCk16T3NVccUxH%2BdF72XLt4Tdu3%2FN6UjjIYwvSqP1mHxycwYjAHrttwxLAA6UvXogQ%2BKEHnt0l2k8H3UDyDHe4cw2Wr%2BZmfsX7fqDWXG%2BNujRhQd3GXn6eGcput3PCXYKoXR5fqoQeaUQSvFGdQHVLJQ1dSWfq8jxGOvFXvKr%2BdExVgQ%2Bl9s219Hn4%2BFYPuHgNDEplBSdQEvnjqg66xQ4ReBbQvSJhg%3D--uOkU7%2FfEL%2FJWIwnP--RQtVoIQi4eUHGDNGiGXxXw%3D%3D",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "operator_test@test.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding a Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set (\"id\", data.id);\r",
									"\r",
									"pm.test(\"New entry added successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{$randomFileName}}\", // проверка на уникальность\r\n\"sqlRequest\": \"select user_id from hershel_events\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/operator/flexible_requests",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"operator",
								"flexible_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  Basic Reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"\r",
									"var id = pm.environment.get(\"id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"requests\");\r",
									"});\r",
									"\r",
									"pm.test(\"Request matches string\", function () {\r",
									"    pm.expect(pm.response.text([\"requests\"][0])).to.include(\"id\",\"name\",\"sqlRequest\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check id \", function () {\r",
									"    pm.expect(data[\"requests\"][0].id).to.eql(id);\r",
									"});// Проверка  на отображение  ранее созданного отчета в базовых отчетах"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/operator/flexible_requests?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"operator",
								"flexible_requests"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for duplicates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Entry with the same name already exists\", function () {\r",
									"     pm.response.to.have.status(422);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"112\", // проверка на уникальность\r\n\"sqlRequest\": \" 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/operator/flexible_requests",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"operator",
								"flexible_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative -checking status code 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"File with this id does not exist\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{$randomStreetName}}\",\r\n\"sqlRequest\": \"select * from users\"\r\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/operator/flexible_requests/{{id}}{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"operator",
								"flexible_requests",
								"{{id}}{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Running a query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request added successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody; \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/cabinet/operator/flexible_requests/{{id}}/run",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"operator",
								"flexible_requests",
								"{{id}}",
								"run"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request deleted successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody; \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/operator/flexible_requests/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"operator",
								"flexible_requests",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative - Deleting a request 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request not found\", function () {\r",
									"     pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/operator/flexible_requests/{{id}}{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"operator",
								"flexible_requests",
								"{{id}}{{id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cabinet matches the user\", function () {\r",
									"     pm.expect(jsonData[\"cabinet\"].name).to.eql(\"Кабинет администратора\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "test777777@digimatics.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cabinet matches the use\", function () {\r",
									"    pm.expect(jsonData[\"cabinet\"].name).to.eql( \"Кабинет поставщика данных\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "operator_test@test.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cabinet matches the use\", function () {\r",
									"   pm.expect(jsonData[\"cabinet\"].name).to.eql( \"Кабинет оператора\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "FOIV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"    pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "testtesttest@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Cabinet matches the use\", function () {\r",
									"    pm.expect(jsonData[\"cabinet\"].name).to.eql( \"Кабинет органа исполнительной власти\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Reports KND",
			"item": [
				{
					"name": "Operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "operator_test@test.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "The dynamics of assessed checks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"chart\",\"daily\",\"total\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":null,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[null],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/rates_analytics",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"rates_analytics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"regions\",\"total\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":null,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[null],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/rates_summary",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"rates_summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checks by region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"chart\",\"result\",\"showActionColumn\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":null,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[null],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/results_by_region",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"results_by_region"
							]
						}
					},
					"response": []
				},
				{
					"name": "Types of inconsistencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"chart\",\"result\",\"showActionColumn\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":null,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[\"all\"],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/violations",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"violations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative influence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"chart\",\"result\",\"showActionColumn\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":null,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[\"all\"],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/negative_impact_extended",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"negative_impact_extended"
							]
						}
					},
					"response": []
				},
				{
					"name": "Detailed inspection report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"result\",\"showActionColumn\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":0,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[null],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/rates_extended",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"rates_extended"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamics by type of negative impact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"chart\",\"result\",\"showActionColumn\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":null,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[\"all\"],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/negative_impact_analytics",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"negative_impact_analytics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Politeness of employees KNO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"chart\",\"result\",\"showActionColumn\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":null,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[\"all\"],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/inspector_politeness",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"inspector_politeness"
							]
						}
					},
					"response": []
				},
				{
					"name": "Competence of employees KNO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"chart\",\"result\",\"showActionColumn\",\"header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"report_type\":\"year\",\"date_start\":\"Wed Jan 01 2020\",\"negative\":null,\"legal_form_ids\":[\"all\"],\"erp_presence_ids\":[\"all\"],\"business_category_ids\":[],\"region_codes\":[],\"authority_reg_ids\":[],\"activity_kind_ids\":[],\"itype_names\":[]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/reports/knd_report/inspector_competence",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"reports",
								"knd_report",
								"inspector_competence"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pending review",
			"item": [
				{
					"name": "1. authorization moderator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "test8708716@digimatics.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. authorization check (current)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что авторизовались модератором\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"authorized\", function () {\r",
									" pm.expect(jsonData.cabinet.slug).to.eql('moderator');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. premoderation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);  \r",
									"pm.environment.set('mode', data.mode);\r",
									"var data1 = (pm.environment.get('mode'));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//проверяем, что режим премодерации выключен, иначе предыдущий отзыв не будет виден в списке обращений: \r",
									"if (data1 == 0) \r",
									" {postman.setNextRequest(\"15. SwitchToggle\")\r",
									"}\r",
									"else {\r",
									" postman.setNextRequest(\"4. authorization admin\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/cabinet/moderator/premoderation",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"premoderation"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. authorization admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									" pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. authorization check (current)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем что мы авторизовались админом \r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"authorized\", function () {\r",
									" pm.expect(jsonData.cabinet.slug).to.eql('admin');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. choosereview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/choosereview",
							"host": [
								"{{host}}"
							],
							"path": [
								"choosereview"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. choose fast search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches pending_reviews\", function () {\r",
									" pm.expect(pm.response.text()).to.include(\"pending_reviews\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/users/pending_reviews.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"pending_reviews.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. searching for Регистрация 1234 value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);  \r",
									"//проверяем то, что при наборе текста \"кадаст\" в ответе есть результаты с паттерном \"кадаст\"\r",
									"pm.test(\"dropdown has кадаст result\", function () {\r",
									" pm.expect(pm.response.text()).to.include(\"Регистрация 1234\");\r",
									"});\r",
									"//берем authorityRegId первого по счету айтема из дропдауна и кладем его в env  \r",
									"pm.environment.set(\"authorityRegId\", data[0].authorityRegId);\r",
									"pm.environment.set(\"serviceRegId\", data[0].regId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"кадаст\""
						},
						"url": {
							"raw": "{{host}}/fts/services.json?query=%22%D0%A0%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F%201234%22",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"services.json"
							],
							"query": [
								{
									"key": "query",
									"value": "%22%D0%A0%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F%201234%22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9. select first dropdown item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"//проверяем, что в ответе RegId ведомства совпадает с тем, что пошло в env в предыдущем запросе\r",
									"pm.test(\"check that response has authorityRegId from environment\", function () {\r",
									" pm.expect(jsonData.value).to.eql(pm.environment.authorityRegId);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/fts/authorities_by_service.json?reg_id={{serviceRegId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"fts",
								"authorities_by_service.json"
							],
							"query": [
								{
									"key": "reg_id",
									"value": "{{serviceRegId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10. pending blob.json with attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем, что в бади есть стринг review_id, но не более 3 отзывов за сутки по одной услуге, иначе будет фэйл и надо будет менять номер объекта в массивах в 5 запросе seatching for кадаст (запрос номер 5) на следующий([0]->[1]) и записывать его reg_id и authority_reg_id в json.blob\r",
									"var data = JSON.parse(responseBody);  \r",
									"pm.test(\"Body contains review_id\", function () {\r",
									" pm.expect(pm.response.text()).to.include(\"review_id\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"review_id\", data.review_id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableUrlEncoding": false,
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json_blob",
									"type": "file",
									"src": "json_blob.json"
								}
							]
						},
						"url": {
							"raw": "{{host}}/reviews.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. authorization moderator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "test8708716@digimatics.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. authorization check (current)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что авторизовались юзером с нужным id\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"authorized\", function () {\r",
									" pm.expect(jsonData.cabinet.slug).to.eql('moderator');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "13. check that response has id of review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем что в ответе есть номер отзыва, который был получен в ответе при запросе с отправкой blob\r",
									"var data = JSON.parse(responseBody);   \r",
									"var review_id = pm.environment.get('review_id') ;\r",
									"pm.environment.set(\"id\", data[\"reviews\"][0].id);\r",
									"var id = pm.environment.get('id') ;\r",
									"\r",
									"pm.test(\"compare_id_from_response_to_id_from_env\", function () {\r",
									" pm.expect(review_id).to.eql (id);\r",
									"});\r",
									"///для того, чтобы аппрувнуть отзыв, нужно отправить (14 запрос) метод post, в теле указать\r",
									"// positive или negative отзыв мы оставили, чтобы не привязываться в blob берем эту инфу из кабинета моедратора, опираясь на id отзыва, который мы получили при отправке, берем этот статус и объявляем его в переменную, которую потом будем использовать в запросе 14\r",
									"\r",
									"pm.environment.set(\"flag\", data[\"reviews\"][0].flag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/moderator/event_reviews?page=1&per_page=10",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"event_reviews"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "14. approve review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const jar = pm.cookies.jar();\r",
									"pm.test(\"review_has_approve_status\", function () {\r",
									" pm.expect(jsonData.status).to.eql('approve');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"//});\r",
									"\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var get_review_value = pm.environment.get('review_id');\r",
									"var string_into_int = parseInt(get_review_value);\r",
									"//\r",
									"pm.environment.set(\"review_id\", string_into_int);\r",
									"//console.log(string_into_int) на это этапе конвертируется успешно, но все равно запрос не одобряет отзыв\r",
									"var proverka = pm.environment.get('review_id');\r",
									"console.log(proverka)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{review_id}},\r\n    \"reason\": \"Отзыв не соответствует требованиям портала, либо не содержит вопроса.\",\r\n    \"flag\": \"{{flag}}\",\r\n    \"item_ids\": [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/moderator/event_reviews/{{review_id}}/moderate?moderate_action=approve_it",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"event_reviews",
								"{{review_id}}",
								"moderate"
							],
							"query": [
								{
									"key": "moderate_action",
									"value": "approve_it"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "15. authorization FOIV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "testtesttest@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "16. authorization check (current)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что авторизовались с ролью фоив\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"authorized\", function () {\r",
									" pm.expect(jsonData.cabinet.slug).to.eql('oiv');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "17. check that response has id of moderated review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что авторизовались с ролью фоив\r",
									"var data = JSON.parse(responseBody);   \r",
									"var review_id = pm.environment.get('review_id') ;\r",
									"pm.environment.set(\"id\", data[\"reviews\"][0].id);\r",
									"var id = pm.environment.get('id') ;\r",
									"\r",
									"pm.test(\"compare_id_from_response_to_id_from_env\", function () {\r",
									" pm.expect(review_id).to.eql (id);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"view\":\"list\",\"authority\":\"\",\"statuses\":\"1,3,4,5,7,8,9,10,11,14,16,20\",\"page\":1,\"per_page\":10,\"filter\":{\"id\":\"\",\"placed_from\":\"\",\"placed_to\":\"\",\"service_reg_id\":\"\",\"region\":\"\",\"overall_rating\":\"\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/event_reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"event_reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "18. read the review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//кликаем прочитать отзыв, убеждаемся, что отзыв прочитан\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('eventId', jsonData.eventId);\r",
									"\r",
									"pm.test(\"status is read\", function () {\r",
									" pm.expect(jsonData.status).to.eql('read');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/event_reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"event_reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "19. answer the review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//отправляем ответ пользователю\r",
									"var jsonData = pm.response.json();\r",
									"var eventId = pm.environment.get('eventId')\r",
									"pm.environment.set(\"answer id\", jsonData.id);\r",
									"\r",
									"pm.test(\"status is read\", function () {\r",
									" pm.expect(jsonData.isPublished).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"eventId matches\", function () {\r",
									" pm.expect(jsonData.eventId).to.eql(eventId);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"doit\":\"publish\",\"body\":\"Спасибо за Ваш отзыв, обращайтесь еще\",\"event_id\":{{eventId}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/answers/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"answers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "20. check answer in answers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что ответ попал в подраздел ответы\r",
									"var jsonData = pm.response.json();\r",
									"var answer_id = pm.environment.get('answer id') ;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"check proper answer\", function () {\r",
									" pm.expect(jsonData.answersListData[0].id).to.eql(answer_id);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/answers?page=1&per_page=10&satisfied=all&date_start=&date_end=&region=",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"answers"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "satisfied",
									"value": "all"
								},
								{
									"key": "date_start",
									"value": ""
								},
								{
									"key": "date_end",
									"value": ""
								},
								{
									"key": "region",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "21. authorization admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									" pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "22. check answer in private cabinet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"//проверяем, что данный отзыв имеет статус отвечен в кабинете пользователя\r",
									"pm.test(\"status answered\", function () {\r",
									" pm.expect(jsonData.status).to.eql ('done_answer');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"disableBodyPruning": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/reviews/{{review_id}}.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews",
								"{{review_id}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "23. like the answer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//оцениваем (положительно) ответ от ведомства\r",
									"\r",
									"pm.test(\"body has ok status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ok\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}reviews/{{review_id}}/answer_like.json",
							"host": [
								"{{host}}reviews"
							],
							"path": [
								"{{review_id}}",
								"answer_like.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "24. authorization FOIV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "testtesttest@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "25. check answer is evaluated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что пользователь оценил ответ от ведомства\r",
									"var jsonData = JSON.parse(responseBody);   \r",
									"\r",
									"pm.test(\"satisfactory answer \", function () {\r",
									" pm.expect(jsonData.answer.status).to.eql ('Заявитель счел ответ удовлетворительным');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"view\":\"list\",\"authority\":\"\",\"statuses\":\"1,3,4,5,7,8,9,10,11,14,16,20\",\"page\":1,\"per_page\":10,\"filter\":{\"id\":\"\",\"placed_from\":\"\",\"placed_to\":\"\",\"service_reg_id\":\"\",\"region\":\"\",\"overall_rating\":\"\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/event_reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"event_reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "26. authorization admin (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// авторизуемся, для того чтобы выполнить specify scenario = сценарий оставления отзыва с запросом уточняющей инфомрацией от ведомства, предоставлении такой информации от пользователя и ответа от ведомства, этапы отправки информации пользователем всегда идут через модератора, в том числе и уточняющей\r",
									"\r",
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									" pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "27. pending blob.json with attributes (specify scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//отправляем отзыв с заготовленным blob файлом в теле\r",
									"var data = JSON.parse(responseBody);  \r",
									"pm.test(\"Body contains review_id\", function () {\r",
									" pm.expect(pm.response.text()).to.include(\"review_id\");\r",
									"});\r",
									"\r",
									"pm.environment.set(\"review_id\", data.review_id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableUrlEncoding": false,
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json_blob",
									"type": "file",
									"src": "json_blob.json"
								}
							]
						},
						"url": {
							"raw": "{{host}}/reviews.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "28. authorization moderator (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "test8708716@digimatics.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "29. check id of review and get flag (specify scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем что в ответе есть номер отзыва, который был получен в ответе при запросе с отправкой blob\r",
									"var data = JSON.parse(responseBody);   \r",
									"var review_id = pm.environment.get('review_id') ;\r",
									"pm.environment.set(\"id\", data[\"reviews\"][0].id);\r",
									"var id = pm.environment.get('id') ;\r",
									"\r",
									"pm.test(\"compare_id_from_response_to_id_from_env\", function () {\r",
									" pm.expect(review_id).to.eql (id);\r",
									"});\r",
									"///для того, чтобы аппрувнуть отзыв, нужно определить flag positive или negative отзыв мы оставили, чтобы не привязываться в blob берем эту инфу из кабинета модератора, опираясь на id отзыва, который мы получили при отправке, берем этот статус и объявляем его в переменную, которую потом будем использовать далее:\r",
									"pm.environment.set(\"flag\", data[\"reviews\"][0].flag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/moderator/event_reviews?page=1&per_page=10",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"event_reviews"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "30. approve review (specify scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//аппрувим отзыв, убеждаемся, что ему проставляется соответствующий статус\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"const jar = pm.cookies.jar();\r",
									"pm.test(\"review_has_approve_status\", function () {\r",
									" pm.expect(jsonData.status).to.eql('approve');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"//});\r",
									"\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var get_review_value = pm.environment.get('review_id');\r",
									"var string_into_int = parseInt(get_review_value);\r",
									"//\r",
									"pm.environment.set(\"review_id\", string_into_int);\r",
									"var proverka = pm.environment.get('review_id');\r",
									"console.log(proverka)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{review_id}},\r\n    \"reason\": \"Отзыв не соответствует требованиям портала, либо не содержит вопроса.\",\r\n    \"flag\": \"{{flag}}\",\r\n    \"item_ids\": [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/moderator/event_reviews/{{review_id}}/moderate?moderate_action=approve_it",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"event_reviews",
								"{{review_id}}",
								"moderate"
							],
							"query": [
								{
									"key": "moderate_action",
									"value": "approve_it"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "31. authorization FOIV (specify scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "testtesttest@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "32. read the review (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//кликаем прочитать отзыв, убеждаемся, что отзыв прочитан (функциональный запрос, при его выполнении начинается отсчет 10 дней для ответа)\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('eventId', jsonData.eventId);\r",
									"\r",
									"pm.test(\"status is read\", function () {\r",
									" pm.expect(jsonData.status).to.eql('read');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/event_reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"event_reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "33. request specification (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//отправляем запрос уточняющей информации в body от ведомства пользователю, проверяем на 200\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"doit\":\"info\",\"body\":\"Запрашиваю уточняющую информацию\",\"event_id\":{{eventId}}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/answers/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"answers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "34. check request has more info status (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что запрос учтоняющей информации имеет статус more_info (этот запрос выполняем потому что его триггерит предыдущий запрос, который является неинформативным для проверки, а проверить нам нужно)\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);   \r",
									"var eventId = pm.environment.get('eventId') ;\r",
									"\r",
									"pm.test(\"check more info status\", function () {\r",
									" pm.expect(jsonData.status).to.eql ('more_info');\r",
									"});\r",
									"\r",
									"pm.test(\"check proper eventId\", function () {\r",
									" pm.expect(jsonData.eventId).to.eql (eventId);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/event_reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"event_reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "35. authorization admin (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									" pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "36. check answer in private cabinet (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//переходим в личный кабинет пользователя, тыкаем на отзыв, проверяем, что данный отзыв имеет статус more_info в его кабинете\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);   \r",
									"var eventId = pm.environment.get('eventId') ;\r",
									"\r",
									"pm.test(\"check more info status\", function () {\r",
									" pm.expect(jsonData.status).to.eql ('more_info');\r",
									"});\r",
									"\r",
									"pm.test(\"check proper eventId\", function () {\r",
									" pm.expect(jsonData.eventId).to.eql (eventId);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"disableBodyPruning": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/reviews/{{review_id}}.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews",
								"{{review_id}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "37. send clarification (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//отвечаем на запрашиваемое ведомством уточнение\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_update_text\":\"Уважаемое ведомство, предоставляю Вам уточняющую информацию\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/reviews/{{review_id}}/create_user_update.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews",
								"{{review_id}}",
								"create_user_update.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "38. check clarification (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что отзыв с предоставлением уточнения, с указанным event_id отправляется в кабинет модератора\r",
									"\r",
									"//так как ответ предыдущего запроса неинформативен для проверки, но триггерит данный запрос, проверяем response данного запроса на предмет уточняющего текста, правильного eventID и статуса \"на модерацию\"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var eventId = pm.environment.get('eventId') ;\r",
									"\r",
									"pm.test(\"status is moderate\", function () {\r",
									" pm.expect(jsonData.status).to.eql('moderate');\r",
									"});\r",
									"\r",
									"pm.test(\"proper eventId\", function () {\r",
									" pm.expect(jsonData.eventId).to.eql(eventId);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Уважаемое ведомство, предоставляю Вам уточняющую информацию\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"disableBodyPruning": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/reviews/{{review_id}}.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews",
								"{{review_id}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "39. authorization moderator (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cookie\", null)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"pm.response.to.have.status(302);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "test8708716@digimatics.ru",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "40. check id of review and get flag (specify scenario) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем что в ответе есть номер отзыва, по которому отправлено уточнение информации для ведомства\r",
									"var data = JSON.parse(responseBody);   \r",
									"var review_id = pm.environment.get('review_id') ;\r",
									"pm.environment.set(\"id\", data[\"reviews\"][0].id);\r",
									"var id = pm.environment.get('id') ;\r",
									"\r",
									"pm.test(\"compare_id_from_response_to_id_from_env\", function () {\r",
									" pm.expect(review_id).to.eql (id);\r",
									"});\r",
									"///для того, чтобы аппрувнуть отзыв, нужно определить flag positive или negative,  берем этот статус и объявляем его в переменную, которую потом будем использовать далее для аппрува\r",
									"\r",
									"pm.environment.set(\"flag\", data[\"reviews\"][0].flag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/moderator/event_reviews?page=1&per_page=10",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"event_reviews"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "41. approve review (specify scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// аппрувим предоставление уточняющей информации и проверяем, что текст, который отправляли в body есть\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"const jar = pm.cookies.jar();\r",
									"pm.test(\"review_has_approve_status\", function () {\r",
									" pm.expect(jsonData.status).to.eql('approve');\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Уважаемое ведомство, предоставляю Вам уточняющую информацию\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"//});\r",
									"\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var get_review_value = pm.environment.get('review_id');\r",
									"var string_into_int = parseInt(get_review_value);\r",
									"//\r",
									"pm.environment.set(\"review_id\", string_into_int);\r",
									"var proverka = pm.environment.get('review_id');\r",
									"console.log(proverka)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{review_id}},\r\n    \"reason\": \"Отзыв не соответствует требованиям портала, либо не содержит вопроса.\",\r\n    \"flag\": \"{{flag}}\",\r\n    \"item_ids\": [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/moderator/event_reviews/{{review_id}}/moderate?moderate_action=approve_it",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"event_reviews",
								"{{review_id}}",
								"moderate"
							],
							"query": [
								{
									"key": "moderate_action",
									"value": "approve_it"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "42. authorization FOIV (specify scenario)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var htmlData = pm.response.headers;\r",
									"pm.environment.set(\"cookie\",Object.values(htmlData)[0][13].value);\r",
									"var cookiefull = (pm.environment.get('cookie'));\r",
									"var cookie = cookiefull.split(';')[0] //Забрать только value, без ;path...\r",
									"pm.environment.set('cookie', cookie);\r",
									"\r",
									"pm.test(\"Status code is 302\", function () {\r",
									"pm.response.to.have.status(302);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user[login]",
									"value": "testtesttest@example.com",
									"type": "text"
								},
								{
									"key": "user[password]",
									"value": "extnrflkzntcnf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/users/sign_in",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"sign_in"
							]
						}
					},
					"response": []
				},
				{
					"name": "43. check that response has id of moderated review Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверяем, что ответ содержит id только что промодерированного отзыва с уточняющей информацией\r",
									"var data = JSON.parse(responseBody);   \r",
									"var review_id = pm.environment.get('review_id') ;\r",
									"pm.environment.set(\"id\", data[\"reviews\"][0].id);\r",
									"var id = pm.environment.get('id') ;\r",
									"\r",
									"pm.test(\"compare_id_from_response_to_id_from_env\", function () {\r",
									" pm.expect(review_id).to.eql (id);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"view\":\"list\",\"authority\":\"\",\"statuses\":\"1,3,4,5,7,8,9,10,11,14,16,20\",\"page\":1,\"per_page\":10,\"filter\":{\"id\":\"\",\"placed_from\":\"\",\"placed_to\":\"\",\"service_reg_id\":\"\",\"region\":\"\",\"overall_rating\":\"\"}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/event_reviews",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"event_reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "44. read the clarificated review (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//кликаем прочитать отзыв, убеждаемся, что отзыв прочитан (функциональный запрос, при его выполнении начинается отсчет 10 дней для ответа)\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set('eventId', jsonData.eventId);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Уважаемое ведомство, предоставляю Вам уточняющую информацию\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/event_reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"event_reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "45. answer clarified review (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//отвечаем на отзыв с предоставленной уточняющей информацией\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Published is true\", function () {\r",
									" pm.expect(jsonData.isPublished).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"doit\":\"publish\",\"body\":\"Спасибо за уточнение. Мы примем все необходимые меры.\",\"event_id\":{{eventId}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/answers/",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"answers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "46. status done_answer (specify scenario)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();\r",
									"\r",
									"jar.clear(pm.request.url, function (error) {\r",
									"  // error - <Error>\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// проверяем, что отзыв получил статус done_answer, что значит, что ответ предоставлен\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"status done_answer\", function () {\r",
									" pm.expect(jsonData.status).to.eql('done_answer');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": true,
						"followRedirects": false,
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"doit\":\"publish\",\"body\":\"Спасибо за уточнение. Мы примем все необходимые меры.\",\"event_id\":{{eventId}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cabinet/survey/event_reviews/{{review_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"survey",
								"event_reviews",
								"{{review_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "15. SwitchToggle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//переключалка режима пре-модерации, который должен быть активен для выполнение модерации всех отзывов в кабинете, к данному запросу обращается запрос pre-moderation если видит, что статус неверный, если статус верный, то запросы коллекции до этого запроса не доходят, останавливаются на последнем запросе, который находится перед ним, с помощью команды postman.setNextRequest(null);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"postman.setNextRequest(\"4. authorization admin\")\r",
									"  \r",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/cabinet/moderator/premoderation/toggle",
							"host": [
								"{{host}}"
							],
							"path": [
								"cabinet",
								"moderator",
								"premoderation",
								"toggle"
							]
						}
					},
					"response": []
				},
				{
					"name": "(not in Runner) pending blob.json with attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// тестовый запрос (НЕ ЗАПУСКАЕТСЯ РАННЕРОМ) для понимания логики отправки отзыва с картинкой с двумя сущностями в body\r",
									"pm.test(\"Body contains review_id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"review_id\");\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);   \r",
									"pm.environment.set(\"review_id\", data.review_id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableUrlEncoding": false,
						"disableCookies": true,
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "cookie",
								"value": "{{cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json_blob",
									"type": "file",
									"src": "json_blob.json"
								},
								{
									"key": "attachments[]",
									"type": "file",
									"src": "/C:/Users/arsen/OneDrive/Рабочий стол/Блобы/с картинкой/ошибка.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/reviews.json",
							"host": [
								"{{host}}"
							],
							"path": [
								"reviews.json"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}